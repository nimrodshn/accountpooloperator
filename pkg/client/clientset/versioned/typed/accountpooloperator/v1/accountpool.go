/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "gitlab.cee.redhat.com/service/uhc-clusters-service/pkg/accountpooloperator/pkg/apis/accountpooloperator/v1"
	scheme "gitlab.cee.redhat.com/service/uhc-clusters-service/pkg/accountpooloperator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AccountPoolsGetter has a method to return a AccountPoolInterface.
// A group's client should implement this interface.
type AccountPoolsGetter interface {
	AccountPools(namespace string) AccountPoolInterface
}

// AccountPoolInterface has methods to work with AccountPool resources.
type AccountPoolInterface interface {
	Create(*v1.AccountPool) (*v1.AccountPool, error)
	Update(*v1.AccountPool) (*v1.AccountPool, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.AccountPool, error)
	List(opts metav1.ListOptions) (*v1.AccountPoolList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AccountPool, err error)
	AccountPoolExpansion
}

// accountPools implements AccountPoolInterface
type accountPools struct {
	client rest.Interface
	ns     string
}

// newAccountPools returns a AccountPools
func newAccountPools(c *AccountpooloperatorV1Client, namespace string) *accountPools {
	return &accountPools{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the accountPool, and returns the corresponding accountPool object, and an error if there is any.
func (c *accountPools) Get(name string, options metav1.GetOptions) (result *v1.AccountPool, err error) {
	result = &v1.AccountPool{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("accountpools").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AccountPools that match those selectors.
func (c *accountPools) List(opts metav1.ListOptions) (result *v1.AccountPoolList, err error) {
	result = &v1.AccountPoolList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("accountpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested accountPools.
func (c *accountPools) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("accountpools").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a accountPool and creates it.  Returns the server's representation of the accountPool, and an error, if there is any.
func (c *accountPools) Create(accountPool *v1.AccountPool) (result *v1.AccountPool, err error) {
	result = &v1.AccountPool{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("accountpools").
		Body(accountPool).
		Do().
		Into(result)
	return
}

// Update takes the representation of a accountPool and updates it. Returns the server's representation of the accountPool, and an error, if there is any.
func (c *accountPools) Update(accountPool *v1.AccountPool) (result *v1.AccountPool, err error) {
	result = &v1.AccountPool{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("accountpools").
		Name(accountPool.Name).
		Body(accountPool).
		Do().
		Into(result)
	return
}

// Delete takes name of the accountPool and deletes it. Returns an error if one occurs.
func (c *accountPools) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("accountpools").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *accountPools) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("accountpools").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched accountPool.
func (c *accountPools) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AccountPool, err error) {
	result = &v1.AccountPool{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("accountpools").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
